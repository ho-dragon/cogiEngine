#version 400 core

in vec2 _pass_textureCoords;
in vec3 _surfaceNormal;
in vec3 _toLightVector[4];
in vec3 _toCameraVector;
in float _fogVisibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 _lightColor[4];
uniform vec3 _lightAttenuation[4];
uniform float _shineDamper;
uniform float _reflectivity;
uniform vec3 _skyColor;

const int LIGHT_COUNT = 4;
const float AMBIENT_LIGHT = 0.2;
const float CEL_LEVELS = 4.0;

void main(void)
{
        vec3 unitNormal = normalize(_surfaceNormal);
        vec3 unitVectorToCamera = normalize(_toCameraVector);
        
        vec3 totalDiffuse = vec3(0.0);
        vec3 totalSpecular = vec3(0.0); 
        
        for(int i=0; i<LIGHT_COUNT; i++)
        {
           float distance = length(_toLightVector[i]);
           float attFactor = _lightAttenuation[i].x + (_lightAttenuation[i].y * distance) + (_lightAttenuation[i].z * distance * distance);
           vec3 unitLightVector = normalize(_toLightVector[i]);    
           float nDotl = dot(unitNormal, unitLightVector);
           float brightness = max(nDotl, 0.0);
           float level = floor(brightness * CEL_LEVELS);
           brightness = level / CEL_LEVELS;
           vec3 lightDirection = -unitLightVector;
           vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);        
           float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
           specularFactor = max(specularFactor, 0.0);
           float dampedFactor = pow(specularFactor, _shineDamper);
           level = floor(dampedFactor * CEL_LEVELS);
           dampedFactor = level / CEL_LEVELS;
           totalDiffuse = totalDiffuse + (brightness * _lightColor[i]) / attFactor;
           totalSpecular = totalSpecular + (dampedFactor * _lightColor[i] * _reflectivity) / attFactor;
        }               
        totalDiffuse = max(totalDiffuse, AMBIENT_LIGHT);;
        
        vec4 textureColor = texture(textureSampler, _pass_textureCoords);
        if (textureColor.a < 0.5) {
            discard;
        }        
        out_Color = vec4(totalDiffuse, 1.0) * textureColor + vec4(totalSpecular, 1.0);
        out_Color = mix(vec4(_skyColor, 1.0), out_Color, _fogVisibility);
}
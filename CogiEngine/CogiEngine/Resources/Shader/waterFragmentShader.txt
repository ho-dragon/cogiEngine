#version 400 core

in vec4 _clipSpace;
in vec2 _textureCoords;
in vec3 _toCameraVector;
in vec3 _toLightVector[4];

out vec4 out_Color;

uniform sampler2D _reflectionTexture;
uniform sampler2D _refractionTexture;
uniform sampler2D _dudvMap;
uniform sampler2D _normalMap;
uniform sampler2D _depthMap;

uniform vec3 _lightColor[4];
uniform vec3 _lightAttenuation[4];
uniform float _shineDamper;
uniform float _reflectivity;
uniform float _moveFactor;

const float WAVE_STRENGTH = 0.04;
const int LIGHT_COUNT = 4;

void main(void) {

    vec2 ndc = (_clipSpace.xy / _clipSpace.w) * 0.5 + 0.5;

    vec2 reflectionTexCoords = vec2(ndc.x, -ndc.y);
    vec2 refractionTexCoords = vec2(ndc.x, ndc.y);
    
    float near = 0.1;
    float far = 1000.0;
    float depth = texture(_depthMap, refractionTexCoords).r;
    float floorDistance = 2.0 * near  * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    
    depth = gl_FragCoord.z;
    float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    float waterDepth = floorDistance - waterDistance;
    
	vec2 distortedTexCoords = texture(_dudvMap, vec2(_textureCoords.x + _moveFactor, _textureCoords.y)).rg * 0.1;
	distortedTexCoords = _textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y + _moveFactor);
	vec2 totalDistortion = (texture(_dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * WAVE_STRENGTH * clamp(waterDepth / 20.0, 0.0, 1.0);
    
    reflectionTexCoords += totalDistortion;
    reflectionTexCoords.x = clamp(reflectionTexCoords.x, 0.001, 0.999);
    reflectionTexCoords.y = clamp(reflectionTexCoords.y, -0.999, -0.001);
     
    refractionTexCoords += totalDistortion;
    refractionTexCoords = clamp(refractionTexCoords, 0.001, 0.999);

    vec4 reflectColor = texture(_reflectionTexture, reflectionTexCoords);
    vec4 refractColor = texture(_refractionTexture, refractionTexCoords);
    
    vec4 normalMapColor = texture(_normalMap, distortedTexCoords);
    vec3 normal = vec3(normalMapColor.r * 2.0 - 1.0, normalMapColor.b * 3.0, normalMapColor.g * 2.0 - 1.0);
    normal = normalize(normal);
        
    vec3 viewVector = normalize(_toCameraVector);
    float refractiveFactor = dot(viewVector, normal);
    refractiveFactor = pow(refractiveFactor, 1.5);
    refractiveFactor = clamp(refractiveFactor, 0.0, 1.0);
    	

    
    vec3 totalSpecular = vec3(0.0);                       
    for(int i=0; i<LIGHT_COUNT; i++)
    {
       float distance = length(_toLightVector[i]);
       float attFactor = _lightAttenuation[i].x + (_lightAttenuation[i].y * distance) + (_lightAttenuation[i].z * distance * distance);
       vec3 unitLightVector = normalize(_toLightVector[i]);    
       float nDotl = dot(normal, unitLightVector);
       vec3 lightDirection = -unitLightVector;
       vec3 reflectedLightDirection = reflect(lightDirection, normal);        
       float specularFactor = dot(reflectedLightDirection, viewVector);
       specularFactor = max(specularFactor, 0.0);
       float dampedFactor = pow(specularFactor, _shineDamper);
       totalSpecular = totalSpecular + (dampedFactor * _lightColor[i] * _reflectivity) / attFactor * clamp(waterDepth / 5.0, 0.0, 1.0);
    }
    
    
	out_Color = mix(reflectColor, refractColor, refractiveFactor);
	out_Color = mix(out_Color, vec4(0.0, 0.3, 0.5, 1.0), 0.2) + vec4(totalSpecular, 0.0);
	out_Color.a = clamp(waterDepth / 5.0, 0.0, 1.0);
}
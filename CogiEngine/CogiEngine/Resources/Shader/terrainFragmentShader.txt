#version 400 core

in vec2 _pass_textureCoords;
in vec3 _surfaceNormal;
in vec3 _toLightVector[4];
in vec3 _toCameraVector;
in float _fogVisibility;

out vec4 out_Color;

uniform sampler2D _blendMap;
uniform sampler2D _baseTexture;
uniform sampler2D _redTexture;
uniform sampler2D _greenTexture;
uniform sampler2D _blueTexture;

uniform vec3 _lightColor[4];
uniform vec3 _lightAttenuation[4];
uniform float _shineDamper;
uniform float _reflectivity;
uniform vec3 _skyColor;

const int LIGHT_COUNT = 4;
const float AMBIENT_LIGHT = 0.2;

void main(void)
{
        vec4 blendMapColor = texture(_blendMap, _pass_textureCoords);
        
        float baseTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
        vec2 tiledCoords = _pass_textureCoords * 40.0;
        
        vec4 baseTextureColor = texture(_baseTexture, tiledCoords) * baseTextureAmount;
        vec4 redTextureColor = texture(_redTexture, tiledCoords) * blendMapColor.r;
        vec4 greenTextureColor = texture(_greenTexture, tiledCoords) * blendMapColor.g;
        vec4 blueTextureColor = texture(_blueTexture, tiledCoords) * blendMapColor.b;
        
        vec4 totalColor = baseTextureColor + redTextureColor + greenTextureColor + blueTextureColor;

        vec3 unitNormal = normalize(_surfaceNormal);
        vec3 unitVectorToCamera = normalize(_toCameraVector);
                                
        vec3 totalDiffuse = vec3(0.0);
        vec3 totalSpecular = vec3(0.0); 
                  
         for(int i=0; i<LIGHT_COUNT; i++)
         {
            float distance = length(_toLightVector[i]);
            float attFactor = _lightAttenuation[i].x + (_lightAttenuation[i].y * distance) + (_lightAttenuation[i].z * distance * distance);
            vec3 unitLightVector = normalize(_toLightVector[i]);    
            float nDotl = dot(unitNormal, unitLightVector);
            vec3 lightDirection = -unitLightVector;
            vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);        
            float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
            specularFactor = max(specularFactor, 0.0);
            float dampedFactor = pow(specularFactor, _shineDamper);
            totalDiffuse = totalDiffuse + (nDotl * _lightColor[i]) / attFactor;
            totalSpecular = totalSpecular + (dampedFactor * _lightColor[i] * _reflectivity) / attFactor;
         }
        totalDiffuse = max(totalDiffuse, AMBIENT_LIGHT);;
        
        out_Color = (vec4(totalDiffuse, 1.0) + 0.3) * totalColor + vec4(totalSpecular, 1.0);
        out_Color = mix(vec4(_skyColor, 1.0), out_Color, _fogVisibility);
}
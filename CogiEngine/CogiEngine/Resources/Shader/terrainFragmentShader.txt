#version 400 core

in vec2 _pass_textureCoords;
in vec3 _surfaceNormal;
in vec3 _toLightVector[4];
in vec3 _toCameraVector;
in float _fogVisibility;
in vec4 _fragPosLightSpace;

out vec4 out_Color;

uniform sampler2D _blendMap;
uniform sampler2D _baseTexture;
uniform sampler2D _redTexture;
uniform sampler2D _greenTexture;
uniform sampler2D _blueTexture;

uniform vec3 _lightColor[4];
uniform vec3 _lightAttenuation[4];
uniform float _shineDamper;
uniform float _reflectivity;
uniform vec3 _skyColor;
uniform sampler2D _shadowMap;

const int LIGHT_COUNT = 4;
const float AMBIENT_LIGHT = 0.0;

float ShadowCalculation(vec4 fragPosLightSpace)
{
     // perform perspective divide
     vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
     
     // transform to [0,1] range
     projCoords = projCoords * 0.5 + 0.5;
         
     // get depth of current fragment from light's perspective
     float currentDepth = projCoords.z;
          
     float acneBias = 0.001;
     float shadow = 0.0;   
     vec2 texelSize = 1.0 / textureSize(_shadowMap, 0);
     
     for(int x = -1; x <= 1; ++x)
     {
         for(int y = -1; y <= 1; ++y)
         {
             float pcfDepth = texture(_shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
             shadow += currentDepth - acneBias > pcfDepth ? 0.5 : 0.0;        
         }    
     }
     
     shadow /= 9.0;
         
     return shadow;
}


void main(void)
{
        vec4 blendMapColor = texture(_blendMap, _pass_textureCoords);
        out_Color = blendMapColor;
        
        float baseTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
        vec2 tiledCoords = _pass_textureCoords * 30.0;
        
        vec4 baseTextureColor = texture(_baseTexture, tiledCoords) * baseTextureAmount;
        vec4 redTextureColor = texture(_redTexture, tiledCoords) * blendMapColor.r;
        vec4 greenTextureColor = texture(_greenTexture, tiledCoords) * blendMapColor.g;
        vec4 blueTextureColor = texture(_blueTexture, tiledCoords) * blendMapColor.b;
        
        vec4 totalColor = baseTextureColor + redTextureColor + greenTextureColor + blueTextureColor;

        vec3 unitNormal = normalize(_surfaceNormal);
        vec3 unitVectorToCamera = normalize(_toCameraVector);
                                
        vec3 totalDiffuse = vec3(0.0);
        vec3 totalSpecular = vec3(0.0); 
                  
         for(int i=0; i<LIGHT_COUNT; i++)
         {
            float distance = length(_toLightVector[i]);
            float attFactor = _lightAttenuation[i].x + (_lightAttenuation[i].y * distance) + (_lightAttenuation[i].z * distance * distance);
            vec3 unitLightVector = normalize(_toLightVector[i]);    
            float nDotl = dot(unitNormal, unitLightVector);
            float brightness = max(nDotl, 0.0);
            vec3 lightDirection = -unitLightVector;
            vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);        
            float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
            specularFactor = max(specularFactor, 0.0);
            float dampedFactor = pow(specularFactor, _shineDamper);
            totalDiffuse = totalDiffuse + (brightness * _lightColor[i]) / attFactor;
            totalSpecular = totalSpecular + (dampedFactor * _lightColor[i] * _reflectivity) / attFactor;
         }
        totalDiffuse = max(totalDiffuse, AMBIENT_LIGHT);;
        
       
        out_Color = (vec4(totalDiffuse, 1.0) + 0.3) * totalColor + vec4(totalSpecular, 1.0);
        float shadow = ShadowCalculation(_fragPosLightSpace);
        out_Color *= (1.0 - shadow);
        out_Color = mix(vec4(_skyColor, 1.0), out_Color, _fogVisibility);
}
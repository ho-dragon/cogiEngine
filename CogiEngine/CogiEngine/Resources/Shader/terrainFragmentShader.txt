#version 400 core

in vec2 _pass_textureCoords;
in vec3 _surfaceNormal;
in vec3 _toLightVector;
in vec3 _toCameraVector;
in float _fogVisibility;

out vec4 out_Color;

uniform sampler2D _blendMap;
uniform sampler2D _baseTexture;
uniform sampler2D _redTexture;
uniform sampler2D _greenTexture;
uniform sampler2D _blueTexture;

uniform vec3 _lightColour;
uniform float _shineDamper;
uniform float _reflectivity;
uniform vec3 _skyColor;

void main(void)
{
        vec4 blendMapColor = texture(_blendMap, _pass_textureCoords);
        
        float baseTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
        vec2 tiledCoords = _pass_textureCoords * 40.0;
        
        vec4 baseTextureColor = texture(_baseTexture, tiledCoords) * baseTextureAmount;
        vec4 redTextureColor = texture(_redTexture, tiledCoords) * blendMapColor.r;
        vec4 greenTextureColor = texture(_greenTexture, tiledCoords) * blendMapColor.g;
        vec4 blueTextureColor = texture(_blueTexture, tiledCoords) * blendMapColor.b;
        
        vec4 totalColor = baseTextureColor + redTextureColor + greenTextureColor + blueTextureColor;

        vec3 unitNormal = normalize(_surfaceNormal);
        vec3 unitLightVector = normalize(_toLightVector);
    
        float nDotl = dot(unitNormal, unitLightVector);
        float ambient = 0.2;
        float brightness = max(nDotl, ambient);
        vec3 diffuse = brightness * _lightColour;
        
        vec3 unitVectorToCamera = normalize(_toCameraVector);
        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
        
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, _shineDamper);
        vec3 finalSpecular = dampedFactor * _lightColour * _reflectivity;
        
        out_Color = (vec4(diffuse, 1.0) + 0.3) * totalColor + vec4(finalSpecular, 1.0);
        out_Color = mix(vec4(_skyColor, 1.0), out_Color, _fogVisibility);
}
#version 400 core

/* layout(location = 0) */ in vec3 _position;
/* layout(location = 1) */ in vec2 _textureCoords;
/* layout(location = 2) */ in vec3 _normal;

out vec2 _pass_textureCoords;
out vec3 _surfaceNormal;
out vec3 _toLightVector[4];
out vec3 _toCameraVector;
out float _fogVisibility;

uniform mat4 _transformationMatrix;
uniform mat4 _projectionMatrix;
uniform mat4 _viewMatrix;
uniform vec3 _lightPosition[4];
uniform float _useFakeLighting;

uniform int _numberOfRows;
uniform vec2 _offset;

const float FOG_DENSITY = 0.007;
const float FOG_GRADIENT = 1.5;
const int LIGHT_COUNT = 4;

void main(void)
{
    vec4 worldPosition = _transformationMatrix * vec4(_position, 1.0);
    vec4 positionRelativeToCam = _viewMatrix * worldPosition;
    
    gl_Position  = _projectionMatrix * positionRelativeToCam;
    _pass_textureCoords = (_textureCoords / _numberOfRows) + _offset;
    
    vec3 fakeNormal = _normal;
    if (_useFakeLighting > 0.5) {
        fakeNormal  = vec3(0.0, 1.0, 0.0); 
    }
    
    _surfaceNormal = (_transformationMatrix * vec4(fakeNormal, 0.0)).xyz;
    for(int i=0; i<LIGHT_COUNT; i++) {
        _toLightVector[i] = _lightPosition[i] - worldPosition.xyz; 
    }
    
    _toCameraVector = (inverse(_viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
    
    float distanceFromCam = length(positionRelativeToCam.xyz);
    _fogVisibility = exp(-pow((distanceFromCam * FOG_DENSITY), FOG_GRADIENT));
    _fogVisibility = clamp(_fogVisibility, 0.0, 1.0); 
}